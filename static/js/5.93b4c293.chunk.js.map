{"version":3,"sources":["hoc/WithAuthRedirect.tsx","images/emptyUser.png","components/common/Paginator/Paginator.module.css","components/common/Paginator/consts.ts","components/common/Paginator/Paginator.tsx","components/MainWrapper/NewsFeed/SearchArea/SearchArea.tsx","components/MainWrapper/NewsFeed/SearchArea/SearchArea.module.css","components/MainWrapper/Users/UserPage.module.css","components/MainWrapper/Users/User/User.module.css","components/MainWrapper/Users/User/User.tsx","components/MainWrapper/Users/UsersPage.tsx","components/MainWrapper/Users/UserPage.container.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","COLORS","Paginator","React","memo","totalCount","portionSize","currentPage","onPageChanged","portionNumber","changePortionNumber","color","pagesCount","Math","ceil","leftPortionPageNumber","rightPortionPageNumber","pages","useCallback","tempPages","i","getPages","colorStyles","style","purple","green","mappedPages","filter","p","map","className","activeNumber","onClick","normalNumber","left","right","bigRight","bigLeft","end","start","Form","reduxForm","form","search","onSubmit","handleSubmit","createField","requiredField","Input","type","text","SearchNews","onSearchArea","searchingArea","formData","searchAreaText","searchArea","User","user","emptyPhoto","isRequestSendUsersId","dispatch","useDispatch","photoZone","PATH","PROFILE","id","src","photos","small","alt","name","followed","disabled","some","userId","actionsUsers","unfollowSaga","FormattedMessage","_id","actionsDialogs","toDialogSaga","followSaga","description","info","userStatus","status","location","country","city","Users","users","pageSize","mappedUsers","usersFrame","setPortionNumber","SearchArea","compose","useState","searchText","setSearchText","useSelector","commonUsersSelector","isFetching","useEffect","getUsersSaga","Preloader","pageNumber","changeCurrentPageActionCreator"],"mappings":"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","file":"static/js/5.93b4c293.chunk.js","sourcesContent":["import React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../Redux/reduxStore\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {isAuth: state.auth.isAuth}\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props;\r\n        return !isAuth\r\n            ? <Redirect to={ '/login' }/>\r\n            : <Component { ...restProps as T } />\r\n    }\r\n\r\n    return connect ( mapStateToProps ) ( RedirectComponent )\r\n\r\n}\r\n","export default __webpack_public_path__ + \"static/media/emptyUser.80e4c874.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pages\":\"Paginator_pages__38HhQ\",\"activeNumber\":\"Paginator_activeNumber__2lXob\",\"normalNumber\":\"Paginator_normalNumber__3KHzh\",\"green\":\"Paginator_green__byT13\",\"purple\":\"Paginator_purple__vCwie\"};","export const COLORS = {\r\n    GREEN:'green',\r\n    PURPLE:'purple',\r\n    TRANSPARENT:'transparent'\r\n}","import React, {useCallback} from \"react\";\r\nimport style from \"./Paginator.module.css\";\r\nimport {COLORS} from \"./consts\";\r\n\r\n\r\ntype PropsType = {\r\n    totalCount: number\r\n    currentPage: number\r\n    portionSize?: number\r\n    portionNumber: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    changePortionNumber: (portion: number) => void\r\n    color?: typeof COLORS\r\n\r\n}\r\n\r\n\r\nconst Paginator: React.FC<PropsType> = React.memo ( ({\r\n                                                         totalCount,\r\n                                                         portionSize = 5,\r\n                                                         currentPage,\r\n                                                         onPageChanged,\r\n                                                         portionNumber,\r\n                                                         changePortionNumber,\r\n                                                         color = COLORS.TRANSPARENT,\r\n                                                     }) => {\r\n\r\n    const pagesCount = Math.ceil ( totalCount / (portionSize +1) ); // pages:number\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    const rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    const getPages = useCallback ( () => {\r\n        let tempPages: number[] = [];\r\n        for (let i = 1; i < pagesCount + 1; i++) {\r\n            tempPages = [...tempPages, i];\r\n        }\r\n        return tempPages;\r\n    }, [pagesCount] );\r\n\r\n    const pages = getPages ();\r\n\r\n    const colorStyles = color == COLORS.PURPLE ? style.purple : color == COLORS.GREEN ? style.green : '';\r\n\r\n    const filteredPages = pages.filter ( p => p >= leftPortionPageNumber && p <= rightPortionPageNumber );\r\n    const mappedPages = filteredPages.map ( (p, i) => {\r\n        return (\r\n            currentPage === p\r\n                ? <span key={ i }\r\n                        className={ style.activeNumber }>{ p }</span>\r\n                : <span key={ i }\r\n                        onClick={ () => {\r\n                            onPageChanged ( p );\r\n                        } }\r\n                        className={ style.normalNumber }>{ p }</span>\r\n        );\r\n    } );\r\n\r\n    const left = portionNumber > 1 &&\r\n        <span onClick={ () => changePortionNumber ( portionNumber - 1 ) }\r\n                                            className={ style.normalNumber }>{ '<' }</span>;\r\n    const right = pagesCount/portionSize > portionNumber &&\r\n        <span onClick={ () => changePortionNumber ( portionNumber + 1 ) }\r\n                                                      className={ style.normalNumber }>{ '>' }</span>;\r\n    const bigRight = portionNumber + 20 <= pagesCount / portionSize &&\r\n        <span onClick={ () => changePortionNumber ( portionNumber + 20 ) }\r\n              className={ style.normalNumber }>{ '>>' }</span>;\r\n    const bigLeft = portionNumber - 20 > 0 && <span onClick={ () => changePortionNumber ( portionNumber - 20 ) }\r\n                                                     className={ style.normalNumber }>{ '<<' }</span>;\r\n    const end = portionNumber + portionSize < pagesCount / portionSize &&\r\n        <span onClick={ () => changePortionNumber ( pagesCount / portionSize ) }\r\n              className={ style.normalNumber }>{ 'end' }</span>;\r\n    const start = portionNumber - portionSize > 0 &&\r\n        <span onClick={ () => changePortionNumber ( 1 ) }\r\n                                                           className={ style.normalNumber }>{ 'start' }</span>;\r\n    return (\r\n        <>\r\n            <div className={ `${ style.pages } ${ colorStyles }` }>\r\n                { start }\r\n                { bigLeft }\r\n                { left }\r\n                { mappedPages }\r\n                { right }\r\n                { bigRight }\r\n                { end }\r\n            </div>\r\n\r\n\r\n        </>\r\n    );\r\n} );\r\nexport default Paginator;","import style from \"./SearchArea.module.css\";\r\nimport React from \"react\";\r\nimport {createField, Input} from \"../../../common/formsContols/FormControls\";\r\nimport {requiredField} from \"../../../../utils/validators\";\r\nimport Button from \"../../../common/Button/Button\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\n\r\n\r\ntype PropsType = {}\r\ntype SearchFormType = {\r\n    searchArea: string\r\n}\r\ntype SearchPropsType = {\r\n    onSearchArea: (searchText: string) => void\r\n}\r\n\r\nconst SearchArea: React.FC<InjectedFormProps<SearchFormType>> & PropsType = (props) => {\r\n    return <div className={ style.search }>\r\n        <form onSubmit={ props.handleSubmit }>\r\n            { createField ( 'search ...', 'searchArea', [requiredField], Input, {type: 'text'} ) }\r\n            <Button text={ 'search' }/>\r\n        </form>\r\n    </div>\r\n}\r\n\r\nconst Form = reduxForm<SearchFormType> ( {form: 'profile add message form'} ) ( SearchArea )\r\n\r\nconst SearchNews: React.FC<SearchPropsType> = React.memo ( ({onSearchArea}) => {\r\n    const onSubmit = (formData: SearchFormType) => {\r\n        const searchAreaText = formData.searchArea;\r\n        onSearchArea ( searchAreaText )\r\n    }\r\n\r\n    return (\r\n        <div className={ style.searchingArea }>\r\n            <Form onSubmit={ onSubmit }/>\r\n        </div>\r\n    )\r\n} );\r\n\r\nexport default SearchNews;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchingArea\":\"SearchArea_searchingArea__3cxqo\",\"search\":\"SearchArea_search__3ZrRQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersFrame\":\"UserPage_usersFrame__1ny86\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"User_user__1J7Ho\",\"description\":\"User_description__1Rnc4\",\"info\":\"User_info__2slCe\",\"name\":\"User_name__2HfxK\",\"userStatus\":\"User_userStatus__fIoiG\",\"location\":\"User_location__gvlFw\",\"country\":\"User_country__31Z5J\",\"city\":\"User_city__3Pe1w\",\"photoZone\":\"User_photoZone__1NDY4\",\"followed\":\"User_followed__23RH-\",\"activeNumber\":\"User_activeNumber__25Xxb\",\"normalNumber\":\"User_normalNumber__2g2Lh\",\"addUsersButton\":\"User_addUsersButton__2FzJQ\"};","import React from \"react\";\r\nimport style from \"./User.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../../common/routes/Routes\";\r\nimport {actionsUsers, UserType} from \"../../../../Redux/usersReducer\";\r\nimport {FormattedMessage} from \"../../../common/FormattedMessage/FormattedMessage\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {actionsDialogs} from \"../../../../Redux/dialogsReducer\";\r\n\r\n\r\ntype UserPropsType = {\r\n    user: UserType\r\n    emptyPhoto: string\r\n    isRequestSendUsersId: number []\r\n}\r\n\r\nconst User: React.FC<UserPropsType> = React.memo ( ({\r\n                                                        user,\r\n                                                        emptyPhoto,\r\n                                                        isRequestSendUsersId,\r\n                                                    }) => {\r\n\r\n    const dispatch = useDispatch ();\r\n\r\n    const follow = (userId: number) => {\r\n        dispatch ( actionsUsers.followSaga ( userId ) );\r\n    };\r\n    const unfollow = (userId: number) => {\r\n        dispatch ( actionsUsers.unfollowSaga ( userId ) );\r\n    };\r\n    const toDialog = (userId: number) => {\r\n        dispatch ( actionsDialogs.toDialogSaga ( userId ) );\r\n    };\r\n\r\n\r\n    return (\r\n        <div className={ style.user } key={ user.id }>\r\n            <div className={ style.photoZone }>\r\n                <NavLink to={ `${ PATH.PROFILE + user.id }` }>\r\n                    <img src={ user.photos.small || emptyPhoto }\r\n                         alt={ `${ user.name }, ${ user.id }` }/>\r\n                </NavLink>\r\n                { user.followed\r\n                    ?\r\n                    <>\r\n                        <button disabled={ isRequestSendUsersId.some ( id => id === user.id ) }\r\n                                className={ style.followed }\r\n                                onClick={ () => {\r\n                                    unfollow ( user.id );\r\n                                } }\r\n                        >\r\n                            <FormattedMessage _id={ 'users.dialogs.unfollow' }/>\r\n                        </button>\r\n                        <button disabled={ isRequestSendUsersId.some ( id => id === user.id ) }\r\n                                className={ style.followed }\r\n                                onClick={ () => {\r\n                                    toDialog ( user.id );\r\n                                } }\r\n                        >\r\n                            <FormattedMessage _id={ 'users.dialogs.dialog' }/>\r\n                        </button>\r\n                    </>\r\n                    :\r\n                    <button disabled={ isRequestSendUsersId.some ( id => id === user.id ) } className={ style.followed }\r\n                            onClick={ () => {\r\n                                follow ( user.id );\r\n                            } }><FormattedMessage _id={ 'users.dialogs.follow' }/></button> }\r\n            </div>\r\n            <div className={ style.description }>\r\n                <div className={ style.info }>\r\n                    <div className={ style.userStatus }><FormattedMessage _id={ user.status }/></div>\r\n                    <div className={ style.name }>{ user.name }</div>\r\n                </div>\r\n                <div className={ style.location }>\r\n                    <span className={ style.country }>\"user.location.country\"</span>\r\n                    <span className={ style.city }>\"user.location.city\"</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n} );\r\nexport default User;","import React, {useEffect, useState} from \"react\";\r\nimport style from './UserPage.module.css';\r\nimport {actionsUsers, UserType} from \"../../../Redux/usersReducer\";\r\nimport User from \"./User/User\";\r\nimport Paginator from \"../../common/Paginator/Paginator\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport SearchArea from \"../NewsFeed/SearchArea/SearchArea\";\r\n\r\n\r\ntype UsersPagePropsType = {\r\n    emptyPhoto: string\r\n    users: UserType[]\r\n    totalCount: number\r\n    pageSize: number\r\n    portionNumber: number\r\n    currentPage: number\r\n    isRequestSendUsersId: number []\r\n    onPageChanged: (pageNumber: number) => void\r\n    onSearchArea:(searchText:string) => void\r\n\r\n}\r\n\r\nconst Users: React.FC<UsersPagePropsType> = React.memo ( (props) => {\r\n\r\n    const {\r\n        users,\r\n        totalCount,\r\n        pageSize,\r\n        onPageChanged,\r\n        emptyPhoto,\r\n        isRequestSendUsersId,\r\n        currentPage,\r\n        portionNumber,\r\n        onSearchArea\r\n    } = props;\r\n\r\n\r\n    const dispatch = useDispatch ();\r\n    const setPortionNumber = (portionNumber: number) => {\r\n        dispatch ( actionsUsers.setPortionNumber ( portionNumber ) );\r\n    };\r\n\r\n\r\n\r\n    const mappedUsers = users.map ( user => {\r\n        return <User user={ user }\r\n                     emptyPhoto={ emptyPhoto }\r\n                     isRequestSendUsersId={ isRequestSendUsersId }\r\n        />;\r\n    } );\r\n\r\n\r\n    return (\r\n        <div className={ style.usersFrame }>\r\n            <Paginator changePortionNumber={ setPortionNumber } portionNumber={ portionNumber }\r\n                       totalCount={ totalCount } currentPage={ currentPage } onPageChanged={ onPageChanged }/>\r\n            <SearchArea onSearchArea={onSearchArea}/>\r\n            { mappedUsers }\r\n        </div>\r\n    );\r\n} );\r\nexport default Users;\r\n\r\n\r\n\r\n\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {actionsUsers, UserType} from \"../../../Redux/usersReducer\";\r\nimport Users from \"./UsersPage\";\r\nimport emptyPhoto from '../../../images/emptyUser.png';\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../../hoc/WithAuthRedirect\";\r\nimport {commonUsersSelector} from \"../../../utils/selectors/users-selectors\";\r\n\r\n\r\ntype PropsType = {\r\n    users: UserType[]\r\n    totalCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    portionNumber: number\r\n    isRequestSendUsersId: number[]\r\n    followCallBack: (id: number) => void\r\n    followUnfollowCallBack: (id: number) => void\r\n    unFollowCallBack: (id: number) => void\r\n    toDialog: (id: number) => void\r\n    changeCurrentPage: (currentPage: number) => void\r\n    changePortionNumber: (portion: number) => void\r\n    getUsersSaga: (pageSize: number, currentPage: number) => void\r\n}\r\nexport type UserResponseType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    photos: { small: string | null, large: string | null }\r\n    followed: boolean\r\n}\r\nexport type UsersResponseType = {\r\n    items: Array<UserResponseType>\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\n\r\nconst UsersPageContainer: React.FC<PropsType> = (props) => {\r\n\r\n    const dispatch = useDispatch ();\r\n    const [searchText, setSearchText] = useState('')\r\n\r\n\r\n\r\n    const {\r\n        users,\r\n        totalCount,\r\n        pageSize,\r\n        currentPage,\r\n        isRequestSendUsersId,\r\n        portionNumber,\r\n        isFetching,\r\n    } = useSelector ( commonUsersSelector );\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch ( actionsUsers.changeCurrentPageActionCreator ( pageNumber ) );\r\n        dispatch ( actionsUsers.getUsersSaga ( pageSize, pageNumber ) );\r\n    };\r\n\r\n    const onSearchArea = (text: string) => {\r\n        setSearchText(text)\r\n    }\r\n\r\n    useEffect ( () => {\r\n        dispatch ( actionsUsers.getUsersSaga ( pageSize, currentPage ,searchText) );\r\n    }, [searchText,currentPage,pageSize,dispatch] );\r\n\r\n\r\n    return <>{ isFetching\r\n        ? <Preloader/>\r\n        : <Users emptyPhoto={ emptyPhoto }\r\n                 users={ users }\r\n                 totalCount={ totalCount }\r\n                 onPageChanged={ onPageChanged }\r\n                 currentPage={ currentPage }\r\n                 pageSize={ pageSize }\r\n                 isRequestSendUsersId={ isRequestSendUsersId }\r\n                 portionNumber={ portionNumber }\r\n                 onSearchArea={onSearchArea}\r\n        /> }</>;\r\n\r\n};\r\n\r\n\r\nexport default compose<React.ComponentType> ( withAuthRedirect ) ( UsersPageContainer );"],"sourceRoot":""}