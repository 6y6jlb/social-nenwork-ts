{"version":3,"sources":["utils/validators.ts","components/common/formsContols/FormControls.tsx","components/common/formsContols/FormControls.module.css","components/common/Button/Button.tsx","components/common/Button/Button.module.css","hoc/WithAuthRedirect.tsx","components/MainWrapper/DialogsWrapper/CurrentDialog/CurrentDialog.module.css","components/MainWrapper/DialogsWrapper/CurrentDialog/SendMessageAreaFromCurrentDialog/SendMessageAreaFromCurrentDialog.module.css","components/MainWrapper/DialogsWrapper/CurrentDialog/MessageFromCurrentDialog/MessageFromCurrentDialog.module.css","components/MainWrapper/DialogsWrapper/CurrentDialog/MessageFromCurrentDialog/MyMessage/MyMessage.module.css","components/MainWrapper/DialogsWrapper/CurrentDialog/MessageFromCurrentDialog/NotMyMessage/NotMyMessage.module.css","components/MainWrapper/DialogsWrapper/FriendListFromDialogs/FriendListFromDialogs.module.css","components/MainWrapper/DialogsWrapper/DialogsWrapper.module.css","components/MainWrapper/DialogsWrapper/CurrentDialog/SendMessageAreaFromCurrentDialog/SendMessageAreaFromCurrentDialog.tsx","components/MainWrapper/DialogsWrapper/CurrentDialog/MessageFromCurrentDialog/MyMessage/MyMessage.tsx","components/MainWrapper/DialogsWrapper/CurrentDialog/MessageFromCurrentDialog/NotMyMessage/NotMyMessage.tsx","components/MainWrapper/DialogsWrapper/CurrentDialog/MessageFromCurrentDialog/MessageFromCurrentDialog.tsx","components/MainWrapper/DialogsWrapper/CurrentDialog/CurrentDialog.tsx","components/MainWrapper/DialogsWrapper/FriendListFromDialogs/FriendListFromDialogs.tsx","components/MainWrapper/DialogsWrapper/DialogsWrapper.tsx","components/MainWrapper/DialogsWrapper/DialogsWrapper.container.tsx"],"names":["requiredField","value","trim","undefined","maxInputLength","length","FormControl","React","memo","props","hasError","meta","touched","error","className","style","textArea","children","Textarea","input","restProps","Input","createField","placeholder","name","validators","component","text","validate","span","module","exports","Button","small","mainButton","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","to","AddNewMessageForm","onSubmit","handleSubmit","type","AddNewMessageFromRedux","reduxForm","form","SendMessageAreaFromCurrentDialog","sendMessageAreaFromCurrentDialog","formData","message","newMessageBody","onAddPost","MyMessage","s","avatar","avatarChild","src","avatarURL","messageFrame","textFrame","textMessage","item","time","cornet","id","NotMyMessage","MessageFromCurrentDialog","messagesBlock","messages","map","m","self","currentDialog","CurrentDialog","currentDialogWrapper","onPostChanger","FriendListFromDialogs","activeItem","active","friendListFromDialogs","DialogsWrapper","dialogsWrapper","addDialogsMessage","changeDialogsInput","compose","selectors","dialogsSelectors","difficultGetMessagesSelector","authSelectors","getIsAuth","getFullName","actionsDialogs"],"mappings":"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","file":"static/js/5.5d64458c.chunk.js","sourcesContent":["export const requiredField= (value:string):string|undefined => {\r\n    if (value) {\r\n        return value.trim() ? undefined : 'error';\r\n    } else return 'error'\r\n}\r\nexport const maxInputLength=(length:number)=> (value:string):string|undefined => {\r\n    if (value.length > length) return  `max length is ${length} symbols`;\r\n        return undefined;\r\n}","import {Field, WrappedFieldProps} from \"redux-form\";\r\nimport React from \"react\";\r\nimport style from './FormControls.module.css'\r\n\r\n\r\nconst FormControl: React.FC<WrappedFieldProps> = React.memo((props) => {\r\n    const hasError = props.meta.touched && props.meta.error;\r\n    return (\r\n        <div>\r\n            <div className={ `${ style.textArea } ${ hasError && style.error }` }>\r\n                { props.children }\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst FormControlWithoutTouched: React.FC<WrappedFieldProps> = React.memo((props) => {\r\n    return (\r\n        <div>\r\n            <div className={ `${ style.textArea }` }>\r\n                { props.children }\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = React.memo((props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return (\r\n        <FormControl  { ...props }>\r\n            <textarea { ...input } { ...restProps }/>\r\n        </FormControl>\r\n    )\r\n})\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = React.memo((props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return (\r\n        <FormControl  { ...props }>\r\n            <input { ...input } { ...restProps }/>\r\n        </FormControl>\r\n    )\r\n})\r\n\r\nexport const TextareaWithoutTouched: React.FC<WrappedFieldProps> = React.memo((props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return (\r\n        <FormControlWithoutTouched  { ...props }>\r\n            <textarea { ...input } { ...restProps }/>\r\n        </FormControlWithoutTouched>\r\n    )\r\n})\r\n\r\nexport const InputWithoutTouched: React.FC<WrappedFieldProps> = React.memo((props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return (\r\n        <FormControlWithoutTouched  { ...props }>\r\n            <input { ...input } { ...restProps }/>\r\n        </FormControlWithoutTouched>\r\n    )\r\n})\r\n\r\n\r\nexport function createField<FormsKeysType extends string>(placeholder: string | undefined,\r\n                                           name: FormsKeysType,\r\n                                           validators: Array<Function>,\r\n                                           component: React.FC<WrappedFieldProps>,\r\n                                           props = {}, text = '') {\r\n    return (\r\n        <>\r\n            <Field placeholder={ placeholder }\r\n                   name={ name }\r\n                   validate={ validators }\r\n                   component={ component }\r\n                   { ...props } />\r\n            <span className={ style.span }>{ text }</span>\r\n        </>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textArea\":\"FormControls_textArea__2E7vZ\",\"error\":\"FormControls_error__2aMmc\",\"blinker\":\"FormControls_blinker__3zqOB\",\"span\":\"FormControls_span__2xR_G\"};","import React,{ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\r\n\r\nimport style from './Button.module.css'\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype PropsType = DefaultButtonPropsType & {\r\n    text:string\r\n    small?:boolean\r\n}\r\n\r\n\r\nconst Button:React.FC<PropsType> =({text,small=false,...restProps}) => {\r\n    return (\r\n        <div className={`${style.mainButton} ${small && style.small}`}>\r\n            <button  {...restProps}>{text}</button>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default Button;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainButton\":\"Button_mainButton__1-99r\",\"small\":\"Button_small__3AeEj\"};","import React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../Redux/reduxStore\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {isAuth: state.auth.isAuth}\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props;\r\n        return !isAuth\r\n            ? <Redirect to={ '/login' }/>\r\n            : <Component { ...restProps as T } />\r\n    }\r\n\r\n    return connect ( mapStateToProps ) ( RedirectComponent )\r\n\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currentDialogWrapper\":\"CurrentDialog_currentDialogWrapper__7jmqe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textArea\":\"SendMessageAreaFromCurrentDialog_textArea__3YiTY\",\"sendMessageAreaFromCurrentDialog\":\"SendMessageAreaFromCurrentDialog_sendMessageAreaFromCurrentDialog__1VSJE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currentDialog\":\"MessageFromCurrentDialog_currentDialog__ocHBh\",\"myMessage\":\"MessageFromCurrentDialog_myMessage__WoHUJ\",\"myAvatar\":\"MessageFromCurrentDialog_myAvatar__3V_VQ\",\"notMyMessage\":\"MessageFromCurrentDialog_notMyMessage__2ZhZd\",\"notMyAvatar\":\"MessageFromCurrentDialog_notMyAvatar__2rO57\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"MyMessage_message__yjYr3\",\"avatar\":\"MyMessage_avatar__2sc-P\",\"messageFrame\":\"MyMessage_messageFrame__2wg_A\",\"cornet\":\"MyMessage_cornet__3Oapb\",\"textMessage\":\"MyMessage_textMessage__3ta3E\",\"textFrame\":\"MyMessage_textFrame__wc00I\",\"name\":\"MyMessage_name__2ddn2\",\"time\":\"MyMessage_time__4iLZ3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"NotMyMessage_message__2zzNu\",\"avatar\":\"NotMyMessage_avatar__DJ68z\",\"messageFrame\":\"NotMyMessage_messageFrame__2WzYR\",\"cornet\":\"NotMyMessage_cornet__SFrBS\",\"textMessage\":\"NotMyMessage_textMessage__38-1V\",\"textFrame\":\"NotMyMessage_textFrame__1iqxP\",\"name\":\"NotMyMessage_name__2_Brb\",\"time\":\"NotMyMessage_time__3WrmT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendListFromDialogs\":\"FriendListFromDialogs_friendListFromDialogs__3oEb4\",\"item\":\"FriendListFromDialogs_item__1b4o6\",\"active\":\"FriendListFromDialogs_active__2mZZu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsWrapper\":\"DialogsWrapper_dialogsWrapper__7JBh7\"};","import React from \"react\";\r\nimport style from './SendMessageAreaFromCurrentDialog.module.css'\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Textarea} from \"../../../../common/formsContols/FormControls\";\r\nimport {requiredField} from \"../../../../../utils/validators\";\r\nimport Button from \"../../../../common/Button/Button\";\r\n\r\n\r\n\r\ntype SendMessageAreaFromCurrentDialogPropsType = {\r\n    onAddPost: (self: boolean,item:string) => void\r\n    onPostChanger: (item: string) => void\r\n\r\n}\r\ntype PropsType = {\r\n}\r\nexport type AddMessageFormType = {\r\n    newMessageBody: string\r\n    validate:any[]\r\n}\r\n\r\n\r\n\r\nconst AddNewMessageForm:React.FC<InjectedFormProps<AddMessageFormType>> & PropsType = React.memo((props)=>{\r\n    return (\r\n        <form onSubmit={ props.handleSubmit }>\r\n            {createField('enter new message here','newMessageBody',[requiredField],Textarea,{type:'text'})}\r\n            <Button text={'send message'}/>\r\n        </form>\r\n    )\r\n})\r\nconst AddNewMessageFromRedux = reduxForm<AddMessageFormType> ( {form: 'profile add message form'} ) (AddNewMessageForm)\r\n\r\nexport const SendMessageAreaFromCurrentDialog:React.FC<SendMessageAreaFromCurrentDialogPropsType> = React.memo((props) =>{\r\n\r\n    const onSubmit = (formData:AddMessageFormType)=>{\r\n        const message = formData.newMessageBody;\r\n        if (message) {\r\n        message.trim()&& props.onAddPost (true,message.trim())\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={ style.sendMessageAreaFromCurrentDialog }>\r\n            <AddNewMessageFromRedux onSubmit={onSubmit}/>\r\n\r\n        </div>\r\n    )\r\n});","import s from \"./MyMessage.module.css\";\r\nimport React from \"react\";\r\n\r\ntype MyMessagePropsType ={\r\n    id: number\r\n    item: string\r\n    self: boolean\r\n    avatarURL: string\r\n    name:string |null\r\n}\r\n\r\nexport const MyMessage = React.memo((props: MyMessagePropsType) => (\r\n    <div className={ s.message } key={ props.id }>\r\n        <div className={ s.avatar }><img className={ s.avatarChild } src={ props.avatarURL }/></div>\r\n        <div className={ s.messageFrame }>\r\n            <div className={ s.textFrame }>\r\n                <div className={ s.name }>{ props.name || 'unknown' }</div>\r\n                <div className={ s.textMessage }>{ props.item }</div>\r\n                <div className={ s.time }>02.21.22</div>\r\n            </div>\r\n            <div className={ s.cornet }></div>\r\n        </div>\r\n    </div>\r\n));","import s from \"./NotMyMessage.module.css\";\r\nimport React from \"react\";\r\n\r\ntype NotMyMessagePropsType = {\r\n    id: number\r\n    item: string\r\n    self: boolean\r\n    avatarURL: string\r\n    name: string | null\r\n}\r\n\r\nexport const NotMyMessage = React.memo((props: NotMyMessagePropsType) => (\r\n    <div className={ s.message }>\r\n        <div className={ s.avatar }><img className={ s.avatarChild } src={ props.avatarURL }/></div>\r\n        <div className={ s.messageFrame }>\r\n            <div className={ s.cornet }></div>\r\n            <div className={ s.textFrame }>\r\n                <div className={ s.name }>{ props.name || 'unknown' }</div>\r\n                <div className={ s.textMessage }>{ props.item }</div>\r\n                <div className={ s.time }>02.21.22</div>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n));","import React from \"react\";\r\nimport s from './MessageFromCurrentDialog.module.css'\r\nimport {MyMessage} from \"./MyMessage/MyMessage\";\r\nimport {NotMyMessage} from \"./NotMyMessage/NotMyMessage\";\r\nimport {MessagesFromDialogsType} from \"../../../../../Redux/dialogsReducer\";\r\n\r\n\r\nexport type MessageFromCurrentDialogPropsType = {\r\n    messages: Array<MessagesFromDialogsType>\r\n    name:string|null\r\n}\r\n\r\nexport const MessageFromCurrentDialog = React.memo((props: MessageFromCurrentDialogPropsType) => {\r\n\r\n    let messagesBlock = props.messages.map(m => {\r\n        return (\r\n            !m.self //определяем чей месадж\r\n                ? <NotMyMessage name={props.name} self={m.self} avatarURL={m.avatarURL} id={m.id} item={m.item} key={m.id}/>\r\n                : <MyMessage name={props.name} self={m.self} avatarURL={m.avatarURL} id={m.id} item={m.item} key={m.id}/>)\r\n    })\r\n\r\n    return (\r\n        <div className={s.currentDialog}>\r\n            {messagesBlock}\r\n        </div>\r\n\r\n\r\n    )\r\n});","import React from \"react\";\r\nimport s from './CurrentDialog.module.css'\r\nimport {SendMessageAreaFromCurrentDialog} from \"./SendMessageAreaFromCurrentDialog/SendMessageAreaFromCurrentDialog\";\r\nimport {MessageFromCurrentDialog} from \"./MessageFromCurrentDialog/MessageFromCurrentDialog\";\r\nimport {MessagesFromDialogsType} from \"../../../../Redux/dialogsReducer\";\r\n\r\nexport type CurrentDialogPropsType = {\r\n    messages: Array<MessagesFromDialogsType>\r\n    onAddPost: (self: boolean,item:string) => void\r\n    onPostChanger: (item: string) => void\r\n    name:string|null\r\n}\r\n\r\nexport const CurrentDialog = React.memo((props: CurrentDialogPropsType) => (\r\n    <div className={ s.currentDialogWrapper }>\r\n        <MessageFromCurrentDialog name={ props.name } messages={ props.messages }/>\r\n        <SendMessageAreaFromCurrentDialog onAddPost={ props.onAddPost } onPostChanger={ props.onPostChanger }/>\r\n    </div>\r\n));\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport s from './FriendListFromDialogs.module.css'\r\n\r\nexport const FriendListFromDialogs = React.memo(() => {\r\nconst activeItem = s.item + ' ' +s.active\r\n    return (\r\n        <div className={s.friendListFromDialogs}>\r\n            <NavLink to='/dialog/1' className={activeItem}>Dmitriy Vitcli-Putcli</NavLink>\r\n            <NavLink to='/dialog/2' className={s.item}>Ivan Vitcli-Putcli</NavLink>\r\n            <NavLink to='/dialog/3' className={s.item}>Fekla Vitcli-Putcli</NavLink>\r\n            <NavLink to='/dialog/4' className={s.item}>Antoniy Vitcli-Putcli</NavLink>\r\n            <NavLink to='/dialog/5' className={s.item}>Vasiliy Vitcli</NavLink>\r\n            <NavLink to='/dialog/6' className={s.item}>etc.</NavLink>\r\n        </div>\r\n    )\r\n});","import React from \"react\";\r\nimport {CurrentDialog} from \"./CurrentDialog/CurrentDialog\";\r\nimport {FriendListFromDialogs} from \"./FriendListFromDialogs/FriendListFromDialogs\";\r\nimport s from './DialogsWrapper.module.css';\r\nimport {MessagesFromDialogsType} from \"../../../Redux/dialogsReducer\";\r\n\r\nexport type DialogsWrapperPropsType = {\r\n    addDialogsMessage: (self: boolean,item:string) => void\r\n    changeDialogsInput: (item: string) => void\r\n    messages: Array<MessagesFromDialogsType>\r\n    isAuth: boolean\r\n    name: string | null\r\n}\r\n\r\nexport const DialogsWrapper: React.FC<DialogsWrapperPropsType> = React.memo((props) => {\r\n    return <div className={ s.dialogsWrapper }>\r\n            <FriendListFromDialogs/>\r\n            <CurrentDialog name={ props.name } onAddPost={ props.addDialogsMessage } onPostChanger={ props.changeDialogsInput }\r\n                           messages={ props.messages }/>\r\n        </div>\r\n\r\n});\r\n","import React from 'react';\r\nimport {DialogsWrapper} from \"./DialogsWrapper\";\r\nimport {actionsDialogs, InitialStateDialogsType} from \"../../../Redux/dialogsReducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {AppStateType} from \"../../../Redux/reduxStore\";\r\nimport {withAuthRedirect} from \"../../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport selectors from '../../../utils/selectors';\r\n\r\n\r\ntype MapStateToPropsType ={\r\n    isAuth:boolean\r\n    name:string|null\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType & InitialStateDialogsType => {\r\n    return {\r\n        messages: selectors.dialogsSelectors.difficultGetMessagesSelector(state),//filter self===true in user-selectors/ test reselect\r\n        isAuth:selectors.authSelectors.getIsAuth(state),\r\n        name:selectors.dialogsSelectors.getFullName(state)\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {addDialogsMessage:actionsDialogs.addDialogsMessage}), withAuthRedirect)(DialogsWrapper)\r\n"],"sourceRoot":""}