{"version":3,"sources":["components/common/login/Login.module.css","components/common/login/loginForm/LoginForm.module.css","components/common/login/loginForm/LoginForm.tsx","components/common/login/Login.tsx","components/common/login/LoginContainer.tsx"],"names":["module","exports","isMaxLengthMore20","maxInputLength","LoginForm","React","memo","props","className","style","loginForm","error","onSubmit","handleSubmit","createField","requiredField","Input","type","undefined","captchaUrl","src","alt","button","reduxForm","form","Login","isAuth","loginTC","userId","exact","to","loginWrapper","modal","active","loginH1","FormattedMessage","_id","data","login","password","checkbox","captcha","compose","connect","state","auth","captchaURL","profileReducer","profile","getAuthError","actionsAuth","loginSaga"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,aAAe,4BAA4B,QAAU,uBAAuB,MAAQ,qBAAqB,OAAS,wB,oBCApID,EAAOC,QAAU,CAAC,UAAY,6BAA6B,OAAS,0BAA0B,MAAQ,2B,iICmBhGC,EAAoBC,YAAiB,IAErCC,EAA0EC,IAAMC,MAAO,SAACC,GAC1F,OAAO,uBAAMC,UAAS,UAAOC,IAAMC,UAAb,YAA4BH,EAAMI,OAASF,IAAME,OAAWC,SAAWL,EAAMM,aAA5F,UACDC,YAAkC,QAAS,QAAS,CAACC,IAAeb,GAAoBc,KACxFF,YAAkC,WAAY,WAAY,CAACC,IAAeb,GAAoBc,IAAO,CAACC,KAAM,aAC5GH,iBAAkCI,EAAW,WAAY,GAAIF,IAAO,CAACC,KAAM,YAAa,cACzFV,EAAMY,YAAa,qBAAKC,IAAKb,EAAMY,WAAYE,IAAI,YACnDd,EAAMY,YAAaL,YAAkC,oBAAqB,UAAW,GAAIE,KAC1F,qBAAKR,UAAYC,IAAMa,OAAvB,SACI,oDAIGC,cAAiC,CAACC,KAAM,SAAxCD,CAAqDnB,G,wBCQrDqB,EA1ByB,SAAC,GAAiD,IAAhDC,EAA+C,EAA/CA,OAAQC,EAAuC,EAAvCA,QAASR,EAA8B,EAA9BA,WAAmBR,GAAW,EAAlBiB,OAAkB,EAAXjB,OAa1E,OAAIe,EAAe,cAAC,IAAD,CAAUG,OAAK,EAACC,GAAK,MAGpC,sBAAKtB,UAAYC,IAAMsB,aAAvB,UACI,qBAAKvB,UAAS,UAAMC,IAAMuB,MAAZ,YAAqBrB,GAASF,IAAMwB,QAAlD,SAA+DtB,IAC/D,qCACI,oBAAIH,UAAYC,IAAMyB,QAAtB,SAAgC,cAACC,EAAA,EAAD,CAAkBC,IAAM,kBACxD,cAAC,EAAD,CAAWjB,WAAaA,EAAaP,SAnBhC,SAACyB,GAAoB,IAC3BC,EAAsCD,EAAtCC,MAAOC,EAA+BF,EAA/BE,SAAUC,EAAqBH,EAArBG,SAAUC,EAAWJ,EAAXI,QAClCd,EAAUW,EAAOC,EAAUC,EAAUC,a,wBCK9BC,sBAA+BC,aATtB,SAACC,GACrB,MAAO,CACHlB,OAAQkB,EAAMC,KAAKnB,OACnBP,WAAYyB,EAAMC,KAAKC,WACvBlB,OAAQgB,EAAMG,eAAeC,QAAQpB,OACrCjB,MAAOsC,uBAAeL,MAI2C,CAACjB,QAASuB,IAAYC,YAAhFT,CAAiGjB","file":"static/js/7.8928f5f0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginWrapper\":\"Login_loginWrapper__Velrt\",\"loginH1\":\"Login_loginH1__2Um05\",\"modal\":\"Login_modal__17JaG\",\"active\":\"Login_active__2kDoT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginForm\":\"LoginForm_loginForm__3RPro\",\"button\":\"LoginForm_button__3wXqZ\",\"error\":\"LoginForm_error__3nA-9\"};","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../../formsContols/FormControls\";\r\nimport {maxInputLength, requiredField} from \"../../../../utils/validators\";\r\nimport style from './LoginForm.module.css'\r\n\r\nexport type FormType = {\r\n    login: string\r\n    password: string\r\n    checkbox: boolean\r\n    captcha:string\r\n}\r\ntype PropsType = {\r\n    captchaUrl: string | null\r\n}\r\n//generic types for createField\r\nexport type CurrentFieldsTypes = Extract<keyof FormType, string>\r\n\r\n\r\n//function inside component\r\nconst isMaxLengthMore20 = maxInputLength ( 20 )\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormType, PropsType> & PropsType> = React.memo ( (props) => {\r\n    return <form className={ `${ style.loginForm } ${ props.error && style.error }` } onSubmit={ props.handleSubmit }>\r\n        { createField<CurrentFieldsTypes> ( 'login', 'login', [requiredField, isMaxLengthMore20], Input ) }\r\n        { createField<CurrentFieldsTypes> ( 'password', 'password', [requiredField, isMaxLengthMore20], Input, {type: 'password'} ) }\r\n        { createField<CurrentFieldsTypes> ( undefined, 'checkbox', [], Input, {type: 'checkbox'}, 'rememberMe' ) }\r\n        {props.captchaUrl&& <img src={props.captchaUrl} alt=\"captcha\"/>}\r\n        {props.captchaUrl&& createField<CurrentFieldsTypes> ( 'text from picture', 'captcha', [], Input)}\r\n        <div className={ style.button }>\r\n            <button>submit</button>\r\n        </div>\r\n    </form>\r\n} )\r\nexport default reduxForm<FormType, PropsType> ( {form: 'login'} ) ( LoginForm );","import React from 'react';\r\nimport style from './Login.module.css';\r\nimport LoginForm, {FormType} from \"./loginForm/LoginForm\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {actionsAuth} from \"../../../Redux/authReducer\";\r\nimport {FormattedMessage} from \"../FormattedMessage/FormattedMessage\";\r\n\r\n\r\ntype LoginPropsType = {\r\n    loginTC: (email: string, password: string, checkbox: boolean, captcha: null | string) => void\r\n    isAuth: boolean\r\n    userId: number\r\n    captchaUrl: string | null\r\n    error: string | null\r\n}\r\n\r\nconst Login: React.FC<LoginPropsType> = ({isAuth, loginTC, captchaUrl, userId,error}) => {\r\n    const onSubmit = (data: FormType) => {\r\n        const {login, password, checkbox, captcha} = data\r\n        loginTC ( login, password, checkbox, captcha )\r\n    }\r\n\r\n    const showModal = () => {\r\n        setTimeout ( () => {\r\n            actionsAuth.setError ( null )\r\n        }, 2000 )\r\n    }\r\n\r\n\r\n    if (isAuth) return <Redirect exact to={ '/' }/> //if isAuth true redirect to profile\r\n\r\n    return (\r\n        <div className={ style.loginWrapper }>\r\n            <div className={ `${style.modal} ${error && style.active}` }>{ error }</div>\r\n            <>\r\n                <h1 className={ style.loginH1 }><FormattedMessage _id={ 'login.title' }/></h1>\r\n                <LoginForm captchaUrl={ captchaUrl } onSubmit={ onSubmit }/>\r\n            </>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Login;\r\n\r\n","import Login from \"./Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../Redux/reduxStore\";\r\nimport {actionsAuth} from \"../../../Redux/authReducer\";\r\nimport {compose} from \"redux\";\r\nimport React from \"react\";\r\nimport {getAuthError} from \"../../../utils/selectors/auth-selectors\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n    userId: number | null\r\n    error: string | null\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        captchaUrl: state.auth.captchaURL,\r\n        userId: state.profileReducer.profile.userId,\r\n        error: getAuthError ( state )\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType> ( connect ( mapStateToProps, {loginTC: actionsAuth.loginSaga} ) ) ( Login );"],"sourceRoot":""}