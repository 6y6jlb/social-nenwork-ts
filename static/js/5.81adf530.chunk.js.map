{"version":3,"sources":["utils/validators.ts","components/common/formsContols/FormControls.tsx","components/common/formsContols/FormControls.module.css","components/common/Button/Button.tsx","components/common/Button/Button.module.css","hoc/WithAuthRedirect.tsx","components/MainWrapper/DialogsWrapper/CurrentDialog/CurrentDialog.module.css","components/MainWrapper/DialogsWrapper/CurrentDialog/SendMessageAreaFromCurrentDialog/SendMessageAreaFromCurrentDialog.module.css","components/MainWrapper/DialogsWrapper/CurrentDialog/MessagesFromCurrentDialog/MessageFromCurrentDialog.module.css","components/MainWrapper/DialogsWrapper/CurrentDialog/MessagesFromCurrentDialog/MyMessage/MyMessage.module.css","components/MainWrapper/DialogsWrapper/CurrentDialog/MessagesFromCurrentDialog/NotMyMessage/NotMyMessage.module.css","components/MainWrapper/DialogsWrapper/FriendListFromDialogs/FriendListFromDialogs.module.css","components/MainWrapper/DialogsWrapper/DialogsWrapper.module.css","components/MainWrapper/DialogsWrapper/CurrentDialog/SendMessageAreaFromCurrentDialog/SendMessageAreaFromCurrentDialog.tsx","components/MainWrapper/DialogsWrapper/CurrentDialog/MessagesFromCurrentDialog/MyMessage/MyMessage.tsx","components/MainWrapper/DialogsWrapper/CurrentDialog/MessagesFromCurrentDialog/NotMyMessage/NotMyMessage.tsx","components/MainWrapper/DialogsWrapper/CurrentDialog/MessagesFromCurrentDialog/MessagesFromCurrentDialog.tsx","components/MainWrapper/DialogsWrapper/CurrentDialog/CurrentDialog.tsx","components/MainWrapper/DialogsWrapper/FriendListFromDialogs/FriendListFromDialogs.tsx","components/MainWrapper/DialogsWrapper/DialogsWrapper.tsx"],"names":["requiredField","value","trim","undefined","maxInputLength","length","FormControl","React","memo","props","hasError","meta","touched","error","className","style","textArea","children","Textarea","input","restProps","Input","createField","placeholder","name","validators","component","text","validate","span","module","exports","Button","small","mainButton","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","to","AddNewMessageForm","onSubmit","handleSubmit","type","AddNewMessageFromRedux","reduxForm","form","SendMessageAreaFromCurrentDialog","sendMessageAreaFromCurrentDialog","formData","message","newMessageBody","onAddPost","MyMessage","s","avatar","avatarChild","src","messageFrame","textFrame","senderName","textMessage","body","time","cornet","NotMyMessage","MessagesFromCurrentDialog","messages","masterId","messagesBlock","map","senderId","currentDialog","CurrentDialog","onPostChanger","currentDialogWrapper","FriendListFromDialogs","dialogs","activeItem","item","active","mappedFriends","friend","id","userName","friendListFromDialogs","DialogsWrapper","getDialogs","changeDialogsInput","addDialogsMessage","getMessages","postMessage","useEffect","dialogsWrapper","compose","selectors","dialogsSelectors","authSelectors","getMyLoginId","actionsDialogs"],"mappings":"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","file":"static/js/5.81adf530.chunk.js","sourcesContent":["export const requiredField= (value:string):string|undefined => {\r\n    if (value) {\r\n        return value.trim() ? undefined : 'error';\r\n    } else return 'error'\r\n}\r\nexport const maxInputLength=(length:number)=> (value:string):string|undefined => {\r\n    if (value.length > length) return  `max length is ${length} symbols`;\r\n        return undefined;\r\n}","import {Field, Validator, WrappedFieldProps} from \"redux-form\";\r\nimport React, {ReactElement} from \"react\";\r\nimport style from './FormControls.module.css'\r\n\r\n\r\nconst FormControl: React.FC<WrappedFieldProps> = React.memo((props) => {\r\n    const hasError = props.meta.touched && props.meta.error;\r\n    return (\r\n        <div>\r\n            <div className={ `${ style.textArea } ${ hasError && style.error }` }>\r\n                { props.children }\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst FormControlWithoutTouched: React.FC<WrappedFieldProps> = React.memo((props) => {\r\n    return (\r\n        <div>\r\n            <div className={ `${ style.textArea }` }>\r\n                { props.children }\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = React.memo((props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return (\r\n        <FormControl  { ...props }>\r\n            <textarea { ...input } { ...restProps }/>\r\n        </FormControl>\r\n    )\r\n})\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = React.memo((props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return (\r\n        <FormControl  { ...props }>\r\n            <input { ...input } { ...restProps }/>\r\n        </FormControl>\r\n    )\r\n})\r\n\r\nexport const TextareaWithoutTouched: React.FC<WrappedFieldProps> = React.memo((props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return (\r\n        <FormControlWithoutTouched  { ...props }>\r\n            <textarea { ...input } { ...restProps }/>\r\n        </FormControlWithoutTouched>\r\n    )\r\n})\r\n\r\nexport const InputWithoutTouched: React.FC<WrappedFieldProps> = React.memo((props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return (\r\n        <FormControlWithoutTouched  { ...props }>\r\n            <input { ...input } { ...restProps }/>\r\n        </FormControlWithoutTouched>\r\n    )\r\n})\r\n\r\n\r\nexport function createField<FormsKeysType extends string>(placeholder: string | undefined,\r\n                                           name: FormsKeysType,\r\n                                           validators: Validator[],\r\n                                           component: React.FC<WrappedFieldProps>,\r\n                                           props = {}, text = '') {\r\n    return (\r\n        <>\r\n            <Field placeholder={ placeholder }\r\n                   name={ name }\r\n                   validate={ validators }\r\n                   component={ component }\r\n                   { ...props } />\r\n            <span className={ style.span }>{ text }</span>\r\n        </>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textArea\":\"FormControls_textArea__27tXa\",\"error\":\"FormControls_error__3padn\",\"blinker\":\"FormControls_blinker__3azrf\",\"span\":\"FormControls_span__28AF2\"};","import React,{ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\r\n\r\nimport style from './Button.module.css'\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype PropsType = DefaultButtonPropsType & {\r\n    text:string\r\n    small?:boolean\r\n}\r\n\r\n\r\nconst Button:React.FC<PropsType> =({text,small=false,...restProps}) => {\r\n    return (\r\n        <div className={`${style.mainButton} ${small && style.small}`}>\r\n            <button  {...restProps}>{text}</button>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default Button;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainButton\":\"Button_mainButton__12rK6\",\"small\":\"Button_small__3hwoO\"};","import React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../Redux/reduxStore\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {isAuth: state.auth.isAuth}\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props;\r\n        return !isAuth\r\n            ? <Redirect to={ '/login' }/>\r\n            : <Component { ...restProps as T } />\r\n    }\r\n\r\n    return connect ( mapStateToProps ) ( RedirectComponent )\r\n\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currentDialogWrapper\":\"CurrentDialog_currentDialogWrapper__Zwcw7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textArea\":\"SendMessageAreaFromCurrentDialog_textArea__y_sSw\",\"sendMessageAreaFromCurrentDialog\":\"SendMessageAreaFromCurrentDialog_sendMessageAreaFromCurrentDialog__3gnTk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currentDialog\":\"MessageFromCurrentDialog_currentDialog__3ukAA\",\"myMessage\":\"MessageFromCurrentDialog_myMessage__BI-Pw\",\"myAvatar\":\"MessageFromCurrentDialog_myAvatar__3fSpv\",\"notMyMessage\":\"MessageFromCurrentDialog_notMyMessage__275OL\",\"notMyAvatar\":\"MessageFromCurrentDialog_notMyAvatar__3KLZK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"MyMessage_message__3v-ps\",\"avatar\":\"MyMessage_avatar__3e3K3\",\"messageFrame\":\"MyMessage_messageFrame__VMg_J\",\"cornet\":\"MyMessage_cornet__1lbLh\",\"textMessage\":\"MyMessage_textMessage__12O8M\",\"textFrame\":\"MyMessage_textFrame__166Ad\",\"name\":\"MyMessage_name__-fuzf\",\"time\":\"MyMessage_time__OFyJE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"NotMyMessage_message__1LtMu\",\"avatar\":\"NotMyMessage_avatar__1d7Sy\",\"messageFrame\":\"NotMyMessage_messageFrame__1ykgF\",\"cornet\":\"NotMyMessage_cornet__NNoAo\",\"textMessage\":\"NotMyMessage_textMessage__3Anrm\",\"textFrame\":\"NotMyMessage_textFrame__27nfr\",\"name\":\"NotMyMessage_name__2WvNd\",\"time\":\"NotMyMessage_time__3c-f4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendListFromDialogs\":\"FriendListFromDialogs_friendListFromDialogs__3XM3p\",\"item\":\"FriendListFromDialogs_item__1XFIB\",\"active\":\"FriendListFromDialogs_active__2tF5W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsWrapper\":\"DialogsWrapper_dialogsWrapper__1-H1z\"};","import React from \"react\";\r\nimport style from './SendMessageAreaFromCurrentDialog.module.css'\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Textarea} from \"../../../../common/formsContols/FormControls\";\r\nimport {requiredField} from \"../../../../../utils/validators\";\r\nimport Button from \"../../../../common/Button/Button\";\r\n\r\n\r\n\r\ntype SendMessageAreaFromCurrentDialogPropsType = {\r\n    onAddPost: (self: boolean,item:string) => void\r\n    onPostChanger: (item: string) => void\r\n\r\n}\r\ntype PropsType = {\r\n}\r\nexport type AddMessageFormType = {\r\n    newMessageBody: string\r\n    validate:any[]\r\n}\r\n\r\n\r\n\r\nconst AddNewMessageForm:React.FC<InjectedFormProps<AddMessageFormType>> & PropsType = React.memo((props)=>{\r\n    return (\r\n        <form onSubmit={ props.handleSubmit }>\r\n            {createField('enter new message here','newMessageBody',[requiredField],Textarea,{type:'text'})}\r\n            <Button text={'send message'}/>\r\n        </form>\r\n    )\r\n})\r\nconst AddNewMessageFromRedux = reduxForm<AddMessageFormType> ( {form: 'profile add message form'} ) (AddNewMessageForm)\r\n\r\nexport const SendMessageAreaFromCurrentDialog:React.FC<SendMessageAreaFromCurrentDialogPropsType> = React.memo((props) =>{\r\n\r\n    const onSubmit = (formData:AddMessageFormType)=>{\r\n        const message = formData.newMessageBody;\r\n        if (message) {\r\n        message.trim()&& props.onAddPost (true,message.trim())\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={ style.sendMessageAreaFromCurrentDialog }>\r\n            <AddNewMessageFromRedux onSubmit={onSubmit}/>\r\n\r\n        </div>\r\n    )\r\n});","import s from \"./MyMessage.module.css\";\r\nimport React from \"react\";\r\nimport {IMessage} from \"../../../../../../api/dialogsAPI\";\r\n\r\ninterface IProps {\r\n    message:IMessage\r\n\r\n}\r\n\r\nexport const MyMessage:React.FC<IProps> = React.memo(({message}) => (\r\n    <div className={ s.message } >\r\n        <div className={ s.avatar }><img className={ s.avatarChild } src={ ''}/></div>\r\n        <div className={ s.messageFrame }>\r\n            <div className={ s.textFrame }>\r\n                <div className={ s.name }>{ message.senderName }</div>\r\n                <div className={ s.textMessage }>{message.body}</div>\r\n                <div className={ s.time }>02.21.22</div>\r\n            </div>\r\n            <div className={ s.cornet }></div>\r\n        </div>\r\n    </div>\r\n));","import s from \"./NotMyMessage.module.css\";\r\nimport React from \"react\";\r\nimport {IMessage} from \"../../../../../../api/dialogsAPI\";\r\n\r\n\r\ninterface IProps {\r\n    message: IMessage;\r\n\r\n}\r\n\r\nexport const NotMyMessage: React.FC<IProps> = React.memo ( ({message}) => (\r\n    <div className={ s.message }>\r\n        <div className={ s.avatar }><img className={ s.avatarChild } src={ '' }/></div>\r\n        <div className={ s.messageFrame }>\r\n            <div className={ s.cornet }></div>\r\n            <div className={ s.textFrame }>\r\n                <div className={ s.name }>{ message.senderName }</div>\r\n                <div className={ s.textMessage }>{ message.body }</div>\r\n                <div className={ s.time }>02.21.22</div>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n) );","import React from \"react\";\r\nimport s from './MessageFromCurrentDialog.module.css';\r\nimport {MyMessage} from \"./MyMessage/MyMessage\";\r\nimport {NotMyMessage} from \"./NotMyMessage/NotMyMessage\";\r\nimport {IMessage} from \"../../../../../api/dialogsAPI\";\r\n\r\n\r\nexport type MessageFromCurrentDialogPropsType = {\r\n    messages: Array<IMessage>\r\n    masterId: number | null\r\n}\r\n\r\nexport const MessagesFromCurrentDialog: React.FC<MessageFromCurrentDialogPropsType> = React.memo ( ({\r\n                                                                                                        messages,\r\n                                                                                                        masterId,\r\n                                                                                                    }) => {\r\n    const messagesBlock = messages.map ( message => {\r\n        const self = message.senderId === masterId; //определяем чей месадж\r\n        return (\r\n            self\r\n                ? <MyMessage message={ message }/>\r\n                : <NotMyMessage message={ message }/>);\r\n    } );\r\n\r\n    return (\r\n        <div className={ s.currentDialog }>\r\n            { messagesBlock }\r\n        </div>\r\n\r\n\r\n    );\r\n} );","import React from \"react\";\r\nimport s from './CurrentDialog.module.css';\r\nimport {SendMessageAreaFromCurrentDialog} from \"./SendMessageAreaFromCurrentDialog/SendMessageAreaFromCurrentDialog\";\r\nimport {IMessage} from \"../../../../api/dialogsAPI\";\r\nimport {MessagesFromCurrentDialog} from \"./MessagesFromCurrentDialog/MessagesFromCurrentDialog\";\r\n\r\n\r\nexport type CurrentDialogPropsType = {\r\n    messages: Array<IMessage>\r\n    onAddPost: (self: boolean,item:string) => void\r\n    onPostChanger: (item: string) => void\r\n    masterId:number | null\r\n\r\n}\r\n\r\nexport const CurrentDialog:React.FC<CurrentDialogPropsType> = React.memo(({messages,onAddPost,onPostChanger,masterId}) => (\r\n    <div className={ s.currentDialogWrapper }>\r\n        <MessagesFromCurrentDialog masterId={masterId}  messages={ messages }/>\r\n        <SendMessageAreaFromCurrentDialog onAddPost={ onAddPost } onPostChanger={ onPostChanger }/>\r\n    </div>\r\n));\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport style from './FriendListFromDialogs.module.css';\r\nimport {IDialogs} from \"../../../../api/dialogsAPI\";\r\n\r\n\r\ninterface IProps {\r\n    dialogs:Array<IDialogs>\r\n}\r\n\r\n\r\n\r\nexport const FriendListFromDialogs:React.FC<IProps> = React.memo ( ({dialogs}) => {\r\n\r\n    const activeItem = style.item + ' ' + style.active;\r\n\r\n    const mappedFriends = dialogs.map ( friend => <NavLink to={ `/dialog/${ friend.id}` } className={ activeItem }>\r\n        <span>{friend.userName}</span>\r\n    </NavLink> );\r\n    return (\r\n        <div className={ style.friendListFromDialogs }>\r\n            { mappedFriends }\r\n        </div>\r\n    );\r\n} );\r\n","import React, {useEffect} from \"react\";\r\nimport {CurrentDialog} from \"./CurrentDialog/CurrentDialog\";\r\nimport {FriendListFromDialogs} from \"./FriendListFromDialogs/FriendListFromDialogs\";\r\nimport s from './DialogsWrapper.module.css';\r\nimport {IDialogs, IMessage} from \"../../../api/dialogsAPI\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {actionsDialogs} from \"../../../Redux/dialogsReducer\";\r\nimport {withAuthRedirect} from \"../../../hoc/WithAuthRedirect\";\r\nimport {AppStateType} from \"../../../Redux/reduxStore\";\r\nimport selectors from \"../../../utils/selectors\";\r\n\r\n\r\n\r\nconst DialogsWrapper: React.FC<DialogsWrapperPropsType> = React.memo ( ({\r\n                                                                                   getDialogs,\r\n                                                                                   changeDialogsInput,\r\n                                                                                   addDialogsMessage,\r\n                                                                                   messages,\r\n                                                                                   getMessages,\r\n                                                                                   postMessage,\r\n                                                                                   dialogs,\r\n                                                                                   masterId\r\n                                                                               }) => {\r\n\r\n    useEffect ( () => {\r\n        getDialogs ();\r\n    }, [] );\r\n    useEffect ( () => {\r\n        getMessages ( 19217 );\r\n    }, [] );\r\n    // useEffect ( () => {\r\n    //     postMessage ( 19217,'test' );\r\n    // }, [] );\r\n\r\n    return <div className={ s.dialogsWrapper }>\r\n        <FriendListFromDialogs dialogs={ dialogs }/>\r\n        { messages ?\r\n            <CurrentDialog masterId={masterId} onAddPost={ addDialogsMessage }\r\n                           onPostChanger={ changeDialogsInput }\r\n                           messages={ messages }/>\r\n            : <div>empty</div> }\r\n    </div>;\r\n\r\n} );\r\n\r\n\r\n//containerComponent\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        messages: selectors.dialogsSelectors.getMessages ( state ),//filter self===true in user-selectors/ test reselect\r\n        dialogs:selectors.dialogsSelectors.getDialogs(state),\r\n        masterId:selectors.authSelectors.getMyLoginId(state)\r\n    };\r\n};\r\n\r\nexport default compose<React.ComponentType> (\r\n    connect ( mapStateToProps, {\r\n        addDialogsMessage: actionsDialogs.addDialogsMessage,\r\n        getDialogs: actionsDialogs.getDialogs,\r\n        getMessages: actionsDialogs.getMessages,\r\n        postMessage: actionsDialogs.postMessage,\r\n    } ), withAuthRedirect ) ( DialogsWrapper );\r\n\r\n\r\n//types\r\n\r\ntype MapStateToPropsType = {\r\n    messages:Array<IMessage>\r\n    dialogs:Array<IDialogs>\r\n    masterId:number | null\r\n}\r\n\r\n\r\nexport type DialogsWrapperPropsType = {\r\n    addDialogsMessage: (self: boolean, item: string) => void\r\n    changeDialogsInput: (item: string) => void\r\n    getMessages: (id: number) => void\r\n    postMessage: (id: number, message: string) => void\r\n    getDialogs: () => void\r\n    messages: Array<IMessage>\r\n    dialogs: Array<IDialogs>\r\n    masterId:number | null\r\n}"],"sourceRoot":""}