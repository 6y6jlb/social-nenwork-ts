{"version":3,"sources":["utils/validators.ts","components/common/formsContols/FormControls.tsx","components/common/formsContols/FormControls.module.css","components/common/login/Login.module.css","components/common/login/loginForm/LoginForm.module.css","components/common/login/loginForm/LoginForm.tsx","components/common/login/Login.tsx","components/common/login/LoginContainer.tsx"],"names":["requiredField","value","trim","undefined","maxInputLength","length","FormControl","React","memo","props","hasError","meta","touched","error","className","style","textArea","children","Textarea","input","restProps","Input","createField","placeholder","name","validators","component","text","validate","span","module","exports","isMaxLengthMore20","LoginForm","loginForm","onSubmit","handleSubmit","type","captchaUrl","src","alt","button","reduxForm","form","Login","isAuth","loginTC","userId","exact","to","loginWrapper","modal","active","loginH1","FormattedMessage","_id","data","login","password","checkbox","captcha","compose","connect","state","auth","captchaURL","profileReducer","profile","getAuthError","actionsAuth","loginSaga"],"mappings":"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","file":"static/js/7.c32f158b.chunk.js","sourcesContent":["export const requiredField= (value:string):string|undefined => {\r\n    if (value) {\r\n        return value.trim() ? undefined : 'error';\r\n    } else return 'error'\r\n}\r\nexport const maxInputLength=(length:number)=> (value:string):string|undefined => {\r\n    if (value.length > length) return  `max length is ${length} symbols`;\r\n        return undefined;\r\n}","import {Field, Validator, WrappedFieldProps} from \"redux-form\";\r\nimport React, {ReactElement} from \"react\";\r\nimport style from './FormControls.module.css'\r\n\r\n\r\nconst FormControl: React.FC<WrappedFieldProps> = React.memo((props) => {\r\n    const hasError = props.meta.touched && props.meta.error;\r\n    return (\r\n        <div>\r\n            <div className={ `${ style.textArea } ${ hasError && style.error }` }>\r\n                { props.children }\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst FormControlWithoutTouched: React.FC<WrappedFieldProps> = React.memo((props) => {\r\n    return (\r\n        <div>\r\n            <div className={ `${ style.textArea }` }>\r\n                { props.children }\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = React.memo((props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return (\r\n        <FormControl  { ...props }>\r\n            <textarea { ...input } { ...restProps }/>\r\n        </FormControl>\r\n    )\r\n})\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = React.memo((props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return (\r\n        <FormControl  { ...props }>\r\n            <input { ...input } { ...restProps }/>\r\n        </FormControl>\r\n    )\r\n})\r\n\r\nexport const TextareaWithoutTouched: React.FC<WrappedFieldProps> = React.memo((props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return (\r\n        <FormControlWithoutTouched  { ...props }>\r\n            <textarea { ...input } { ...restProps }/>\r\n        </FormControlWithoutTouched>\r\n    )\r\n})\r\n\r\nexport const InputWithoutTouched: React.FC<WrappedFieldProps> = React.memo((props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return (\r\n        <FormControlWithoutTouched  { ...props }>\r\n            <input { ...input } { ...restProps }/>\r\n        </FormControlWithoutTouched>\r\n    )\r\n})\r\n\r\n\r\nexport function createField<FormsKeysType extends string>(placeholder: string | undefined,\r\n                                           name: FormsKeysType,\r\n                                           validators: Validator[],\r\n                                           component: React.FC<WrappedFieldProps>,\r\n                                           props = {}, text = '') {\r\n    return (\r\n        <>\r\n            <Field placeholder={ placeholder }\r\n                   name={ name }\r\n                   validate={ validators }\r\n                   component={ component }\r\n                   { ...props } />\r\n            <span className={ style.span }>{ text }</span>\r\n        </>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textArea\":\"FormControls_textArea__27tXa\",\"error\":\"FormControls_error__3padn\",\"blinker\":\"FormControls_blinker__3azrf\",\"span\":\"FormControls_span__28AF2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginWrapper\":\"Login_loginWrapper__Velrt\",\"loginH1\":\"Login_loginH1__2Um05\",\"modal\":\"Login_modal__17JaG\",\"active\":\"Login_active__2kDoT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginForm\":\"LoginForm_loginForm__3RPro\",\"button\":\"LoginForm_button__3wXqZ\",\"error\":\"LoginForm_error__3nA-9\"};","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../../formsContols/FormControls\";\r\nimport {maxInputLength, requiredField} from \"../../../../utils/validators\";\r\nimport style from './LoginForm.module.css'\r\n\r\nexport type FormType = {\r\n    login: string\r\n    password: string\r\n    checkbox: boolean\r\n    captcha:string\r\n}\r\ntype PropsType = {\r\n    captchaUrl: string | null\r\n}\r\n//generic types for createField\r\nexport type CurrentFieldsTypes = Extract<keyof FormType, string>\r\n\r\n\r\n//function inside component\r\nconst isMaxLengthMore20 = maxInputLength ( 20 )\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormType, PropsType> & PropsType> = React.memo ( (props) => {\r\n    return <form className={ `${ style.loginForm } ${ props.error && style.error }` } onSubmit={ props.handleSubmit }>\r\n        { createField<CurrentFieldsTypes> ( 'login', 'login', [requiredField, isMaxLengthMore20], Input ) }\r\n        { createField<CurrentFieldsTypes> ( 'password', 'password', [requiredField, isMaxLengthMore20], Input, {type: 'password'} ) }\r\n        { createField<CurrentFieldsTypes> ( undefined, 'checkbox', [], Input, {type: 'checkbox'}, 'rememberMe' ) }\r\n        {props.captchaUrl&& <img src={props.captchaUrl} alt=\"captcha\"/>}\r\n        {props.captchaUrl&& createField<CurrentFieldsTypes> ( 'text from picture', 'captcha', [], Input)}\r\n        <div className={ style.button }>\r\n            <button>submit</button>\r\n        </div>\r\n    </form>\r\n} )\r\nexport default reduxForm<FormType, PropsType> ( {form: 'login'} ) ( LoginForm );","import React from 'react';\r\nimport style from './Login.module.css';\r\nimport LoginForm, {FormType} from \"./loginForm/LoginForm\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {actionsAuth} from \"../../../Redux/auth-reducer\";\r\nimport {FormattedMessage} from \"../FormattedMessage/FormattedMessage\";\r\n\r\n\r\ntype LoginPropsType = {\r\n    loginTC: (email: string, password: string, checkbox: boolean, captcha: null | string) => void\r\n    isAuth: boolean\r\n    userId: number\r\n    captchaUrl: string | null\r\n    error: string | null\r\n}\r\n\r\nconst Login: React.FC<LoginPropsType> = ({isAuth, loginTC, captchaUrl, userId,error}) => {\r\n    const onSubmit = (data: FormType) => {\r\n        const {login, password, checkbox, captcha} = data\r\n        loginTC ( login, password, checkbox, captcha )\r\n    }\r\n\r\n    const showModal = () => {\r\n        setTimeout ( () => {\r\n            actionsAuth.setError ( null )\r\n        }, 2000 )\r\n    }\r\n\r\n\r\n    if (isAuth) return <Redirect exact to={ '/' }/> //if isAuth true redirect to profile\r\n\r\n    return (\r\n        <div className={ style.loginWrapper }>\r\n            <div className={ `${style.modal} ${error && style.active}` }>{ error }</div>\r\n            <>\r\n                <h1 className={ style.loginH1 }><FormattedMessage _id={ 'login.title' }/></h1>\r\n                <LoginForm captchaUrl={ captchaUrl } onSubmit={ onSubmit }/>\r\n            </>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Login;\r\n\r\n","import Login from \"./Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../Redux/reduxStore\";\r\nimport {actionsAuth} from \"../../../Redux/auth-reducer\";\r\nimport {compose} from \"redux\";\r\nimport React from \"react\";\r\nimport {getAuthError} from \"../../../utils/selectors/auth-selectors\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n    userId: number | null\r\n    error: string | null\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        captchaUrl: state.auth.captchaURL,\r\n        userId: state.profileReducer.profile.userId,\r\n        error: getAuthError ( state )\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType> ( connect ( mapStateToProps, {loginTC: actionsAuth.loginSaga} ) ) ( Login );"],"sourceRoot":""}