{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","hoc/WithAuthRedirect.tsx","components/MainWrapper/DialogsWrapper/DialogsWrapper.module.css","components/MainWrapper/DialogsWrapper/DialogsWrapper.tsx","components/MainWrapper/DialogsWrapper/DialogsWrapper.container.tsx"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","DialogsWrapper","React","memo","getDialogs","getMessages","name","changeDialogsInput","addDialogsMessage","messages","postMessage","useEffect","className","s","dialogsWrapper","compose","actionsDialogs"],"mappings":"wHACe,SAASA,EAAyBC,EAAQC,GACvD,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IACIE,EAAKC,EADLC,ECHS,SAAuCJ,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,EDTM,CAA6BJ,EAAQC,GAGlD,GAAIK,OAAOI,sBAAuB,CAChC,IAAIC,EAAmBL,OAAOI,sBAAsBV,GAEpD,IAAKG,EAAI,EAAGA,EAAIQ,EAAiBH,OAAQL,IACvCD,EAAMS,EAAiBR,GACnBF,EAASQ,QAAQP,IAAQ,GACxBI,OAAOM,UAAUC,qBAAqBC,KAAKd,EAAQE,KACxDE,EAAOF,GAAOF,EAAOE,IAIzB,OAAOE,E,wJEPHW,EAAkB,SAACC,GACrB,MAAO,CAACC,OAAQD,EAAME,KAAKD,SAGxB,SAASE,EAAoBC,GAShC,OAAOC,YAAUN,EAAVM,EAPmB,SAACC,GAAgC,IAClDL,EAAwBK,EAAxBL,OAAWM,EADsC,YACzBD,EADyB,YAEtD,OAAQL,EAEF,cAACG,EAAD,eAAgBG,IADhB,cAAC,IAAD,CAAUC,GAAK,gB,oBClB7BC,EAAOC,QAAU,CAAC,eAAiB,yC,qFCiBtBC,EAAoDC,IAAMC,MAAO,YASQ,IARHC,EAQE,EARFA,WAMAC,GAEE,EAPFC,KAOE,EANFC,mBAME,EALFC,kBAKE,EAJFC,SAIE,EAHFlB,OAGE,EAFFc,aACAK,EACE,EADFA,YAa/E,OAVAC,qBAAY,WACRP,MACD,IACHO,qBAAY,WACRN,EAAc,SACf,IACHM,qBAAY,WACRD,EAAc,MAAM,UACrB,IAEI,qBAAKE,UAAYC,IAAEC,oB,iCCffC,sBACXpB,YAAU,KAAM,CACZa,kBAAmBQ,IAAeR,kBAClCJ,WAAYY,IAAeZ,WAC3BC,YAAaW,IAAeX,YAC5BK,YAAaM,IAAeN,cAC3BjB,IANMsB,CAMed","file":"static/js/8.10c0e230.chunk.js","sourcesContent":["import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../Redux/reduxStore\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {isAuth: state.auth.isAuth}\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props;\r\n        return !isAuth\r\n            ? <Redirect to={ '/login' }/>\r\n            : <Component { ...restProps as T } />\r\n    }\r\n\r\n    return connect ( mapStateToProps ) ( RedirectComponent )\r\n\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsWrapper\":\"DialogsWrapper_dialogsWrapper__1-H1z\"};","import React, {useEffect} from \"react\";\r\nimport {CurrentDialog} from \"./CurrentDialog/CurrentDialog\";\r\nimport {FriendListFromDialogs} from \"./FriendListFromDialogs/FriendListFromDialogs\";\r\nimport s from './DialogsWrapper.module.css';\r\nimport {MessagesFromDialogsType} from \"../../../Redux/dialogsReducer\";\r\n\r\n\r\nexport type DialogsWrapperPropsType = {\r\n    addDialogsMessage: (self: boolean, item: string) => void\r\n    changeDialogsInput: (item: string) => void\r\n    getMessages: (id: number) => void\r\n    postMessage: (id: number, message: string) => void\r\n    getDialogs: () => void\r\n    messages: Array<MessagesFromDialogsType>\r\n    isAuth: boolean\r\n    name: string | null\r\n}\r\n\r\nexport const DialogsWrapper: React.FC<DialogsWrapperPropsType> = React.memo ( ({\r\n                                                                                   getDialogs,\r\n                                                                                   name,\r\n                                                                                   changeDialogsInput,\r\n                                                                                   addDialogsMessage,\r\n                                                                                   messages,\r\n                                                                                   isAuth,\r\n                                                                                   getMessages,\r\n                                                                                   postMessage,\r\n                                                                               }) => {\r\n\r\n    useEffect ( () => {\r\n        getDialogs ();\r\n    }, [] );\r\n    useEffect ( () => {\r\n        getMessages ( 19217 );\r\n    }, [] );\r\n    useEffect ( () => {\r\n        postMessage ( 19217,'test' );\r\n    }, [] );\r\n\r\n    return <div className={ s.dialogsWrapper }>\r\n        {/*<FriendListFromDialogs/>*/}\r\n        {/*<CurrentDialog name={ name } onAddPost={ addDialogsMessage }*/}\r\n        {/*               onPostChanger={ changeDialogsInput }*/}\r\n        {/*               messages={ messages }/>*/}\r\n    </div>;\r\n\r\n} );\r\n","import React from 'react';\r\nimport {DialogsWrapper} from \"./DialogsWrapper\";\r\nimport {actionsDialogs, InitialStateDialogsType} from \"../../../Redux/dialogsReducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {AppStateType} from \"../../../Redux/reduxStore\";\r\nimport {withAuthRedirect} from \"../../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport selectors from '../../../utils/selectors';\r\n\r\n\r\n// type MapStateToPropsType = {\r\n//     isAuth: boolean\r\n//     name: string | null\r\n// }\r\n//\r\n// let mapStateToProps = (state: AppStateType): MapStateToPropsType & InitialStateDialogsType => {\r\n//     return {\r\n//         messages: selectors.dialogsSelectors.difficultGetMessagesSelector ( state ),//filter self===true in user-selectors/ test reselect\r\n//         isAuth: selectors.authSelectors.getIsAuth ( state ),\r\n//         name: selectors.dialogsSelectors.getFullName ( state ),\r\n//     };\r\n// };\r\n\r\nexport default compose<React.ComponentType> (\r\n    connect ( null, {\r\n        addDialogsMessage: actionsDialogs.addDialogsMessage,\r\n        getDialogs: actionsDialogs.getDialogs,\r\n        getMessages: actionsDialogs.getMessages,\r\n        postMessage: actionsDialogs.postMessage,\r\n    } ), withAuthRedirect ) ( DialogsWrapper );\r\n"],"sourceRoot":""}